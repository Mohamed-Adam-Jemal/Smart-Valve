// Including Libraries
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

////////////////////////////////////////////////////////////////// Setting up device properties and WiFi connection  /////////////////////////////////////////////////////////////////////

// Define pin numbers for valve and buzzer
#define valve_pin 33
#define buzzer_pin 27

// Define IoT Cloud credentials
const char DEVICE_LOGIN_NAME[]  = "Your_device_login_name"; // Deivce ID (generated by the Arduino IoT Cloud when adding your device to your account)
const char SSID[] = "Your_network_name";    // Network SSID (name)
const char PASS[] = "Your_network_password";    // Network password (use for WPA, or use as key for WEP)
const char DEVICE_KEY[] = "Your_secret_device_key";    // generated by the Arduino IoT Cloud when adding your device to your account)

// Global variable to store the state of the smart valve
bool smart_valve;

// Prototype for the function called when smart_valve property changes
void onSmartValveChange();

// Function to initialize properties for Arduino IoT Cloud
void initProperties() {
  ArduinoCloud.setBoardId(DEVICE_LOGIN_NAME);
  ArduinoCloud.setSecretDeviceKey(DEVICE_KEY);
  ArduinoCloud.addProperty(smart_valve, READWRITE, ON_CHANGE, onSmartValveChange);
}

// WiFi connection handler with specified SSID and password
WiFiConnectionHandler ArduinoIoTPreferredConnection(SSID, PASS);

////////////////////////////////////////////////////////////////// Functions Declaration /////////////////////////////////////////////////////////////////////////////////////////

// Function to start a signaling sequence on a pin
void start_signal(int pin) {
  digitalWrite(pin, HIGH);
  delay(100);
  digitalWrite(pin, LOW);
  delay(100);
  digitalWrite(pin, HIGH);
  delay(100);
  digitalWrite(pin, LOW);
}

// Function to end a signaling sequence on a pin
void end_signal(int pin) {
  digitalWrite(pin, HIGH);
  delay(500);
  digitalWrite(pin, LOW);
}

// Function called when smart_valve property changes
void onSmartValveChange() {
  // If smart_valve is true, open the valve and start signaling
  if (smart_valve) {
    digitalWrite(valve_pin, HIGH);
    start_signal(buzzer_pin);
  } 
  // If smart_valve is false, close the valve and end signaling
  else {
    digitalWrite(valve_pin, LOW);
    end_signal(buzzer_pin);
  }
}

////////////////////////////////////////////////////////////////// Setup function - runs once at the beginning ////////////////////////////////////////////////////////////////////

void setup() {
  // Set pin modes for valve and buzzer
  pinMode(valve_pin, OUTPUT);
  pinMode(buzzer_pin, OUTPUT);
  
  // Initialize serial communication
  Serial.begin(9600);
  
  // Delay to allow time for Serial Monitor to open
  delay(1500);

  // Initialize properties for Arduino IoT Cloud
  initProperties();

  // Begin connection to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  // Set debug message level and print debug information
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

////////////////////////////////////////////////////////////////// Loop function - runs repeatedly after setup ////////////////////////////////////////////////////////////////////
void loop() {
  // Update connection to Arduino IoT Cloud
  ArduinoCloud.update();
}

